!-------------------------------------------------------------------------!
!                                                                         !
!        N  A  S     P A R A L L E L     B E N C H M A R K S  3.3         !
!                                                                         !
!                                   F T                                   !
!                                                                         !
!-------------------------------------------------------------------------!
!                                                                         !
!    This benchmark is part of the NAS Parallel Benchmark 3.3 suite.      !
!    It is described in NAS Technical Reports 95-020 and 02-007           !
!                                                                         !
!    Permission to use, copy, distribute and modify this software         !
!    for any purpose with or without fee is hereby granted.  We           !
!    request, however, that all derived work reference the NAS            !
!    Parallel Benchmarks 3.3. This software is provided "as is"           !
!    without express or implied warranty.                                 !
!                                                                         !
!    Information on NPB 3.3, including the technical report, the          !
!    original specifications, source code, results and information        !
!    on how to submit new results, is available at:                       !
!                                                                         !
!           http://www.nas.nasa.gov/Software/NPB/                         !
!                                                                         !
!    Send comments or suggestions to  npb@nas.nasa.gov                    !
!                                                                         !
!          NAS Parallel Benchmarks Group                                  !
!          NASA Ames Research Center                                      !
!          Mail Stop: T27A-1                                              !
!          Moffett Field, CA   94035-1000                                 !
!                                                                         !
!          E-mail:  npb@nas.nasa.gov                                      !
!          Fax:     (650) 604-3957                                        !
!                                                                         !
!-------------------------------------------------------------------------!

      include 'npbparams.fi'

! 2D processor array -> 2D grid decomposition (by pencils)
! If processor array is 1xN or -> 1D grid decomposition (by planes)
! If processor array is 1x1 -> 0D grid decomposition
! For simplicity, do not treat Nx1 (np2 = 1) specially
      integer np1, np2, np

! basic decomposition strategy
      integer layout_type
      integer layout_0D, layout_1D, layout_2D
      parameter (layout_0D = 0, layout_1D = 1, layout_2D = 2)

      common /procgrid/ np1, np2, layout_type, np


! Cache blocking params. These values are good for most
! RISC processors.
! FFT parameters:
!  fftblock controls how many ffts are done at a time.
!  The default is appropriate for most cache-based machines
!  On vector machines, the FFT can be vectorized with vector
!  length equal to the block size, so the block size should
!  be as large as possible. This is the size of the smallest
!  dimension of the problem: 128 for class A, 256 for class B and
!  512 for class C.
! Transpose parameters:
!  transblock is the blocking factor for the transposes when there
!  is a 1-D layout. On vector machines it should probably be
!  large (largest dimension of the problem).


      integer fftblock_default, fftblockpad_default
      parameter (fftblock_default=16, fftblockpad_default=18)
      integer transblock, transblockpad
      parameter(transblock=32, transblockpad=34)

      integer fftblock, fftblockpad
      common /blockinfo/ fftblock, fftblockpad

! we need a bunch of logic to keep track of how
! arrays are laid out.
! coords of this processor
      integer me, me1, me2
      common /coords/ me, me1, me2
! need a communicator for row/col in processor grid
      integer commslice1, commslice2, node_comm
      common /comms/ commslice1, commslice2, node_comm




! There are basically three stages
! 1: x-y-z layout
! 2: after x-transform (before y)
! 3: after y-transform (before z)
! The computation proceeds logically as

! set up initial conditions
! fftx(1)
! transpose (1->2)
! ffty(2)
! transpose (2->3)
! fftz(3)
! time evolution
! fftz(3)
! transpose (3->2)
! ffty(2)
! transpose (2->1)
! fftx(1)
! compute residual(1)

! for the 0D, 1D, 2D strategies, the layouts look like xxx
!
!            0D        1D        2D
! 1:        xyz       xyz       xyz
! 2:        xyz       xyz       yxz
! 3:        xyz       zyx       zxy

! the array dimensions are stored in dims(coord, phase)
      integer dims(3, 3)
      integer xstart(3), ystart(3), zstart(3)
      integer xend(3), yend(3), zend(3)
      common /layout/ dims, &
                     xstart, ystart, zstart, &
                     xend, yend, zend

      integer T_total, T_setup, T_fft, T_evolve, T_checksum, &
             T_fftlow, T_fftcopy, T_transpose, &
             T_transxzloc, T_transxzglo, T_transxzfin, &
             T_transxyloc, T_transxyglo, T_transxyfin, &
             T_synch, T_init, T_max
      parameter (T_total = 1, T_setup = 2, T_fft = 3, &
                T_evolve = 4, T_checksum = 5, &
                T_fftlow = 6, T_fftcopy = 7, T_transpose = 8, &
                T_transxzloc = 9, T_transxzglo = 10, T_transxzfin = 11, &
                T_transxyloc = 12, T_transxyglo = 13, &
                T_transxyfin = 14,  T_synch = 15, T_init = 16, &
                T_max = 16)



      logical timers_enabled


      external timer_read
      double precision timer_read
      external ilog2
      integer ilog2

      external get_at_tid_parallel, get_at_tid_serial
      integer get_at_tid_parallel, get_at_tid_serial

      external randlc
      double precision randlc


! other stuff
      logical debug, debugsynch
      common /dbg/ debug, debugsynch, timers_enabled

      double precision seed, a, pi, alpha
      parameter (seed = 314159265.d0, a = 1220703125.d0, &
       pi = 3.141592653589793238d0, alpha=1.0d-6)

! roots of unity array
! relies on x being largest dimension?
      double complex u(nx)
      common /ucomm/ u


! for checksum data
      double complex sums(0:niter_default)
      common /sumcomm/ sums

! number of iterations
      integer niter, pswitch
      common /iter/ niter, pswitch

